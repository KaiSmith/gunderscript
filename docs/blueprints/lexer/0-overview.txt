GunderScript Lexer Overview
********************************************************************************
GunderScript is a complex piece of software. To ensure that it can correctly 
interpret code, the human readable code written by the user is first lexed, 
converting it into a series of Tokens which are stored in an array.

The lexing is a multistep process. 
Step 1: preprocess: removes comments, etc, from code. Possible future 
preprocessing functions added here. No reason to yet.

Step 2: 




********************************************************************************
Token information

Token {
  TokenType type;    <-- what manner of token this list. the list is below
  char ** args;      <-- if this is a function dec, the arguments.
  Token ** members;
  union data {       <-- the data stored in this token, pertaining to the type
    double number; 
    char * string;
    char operator[4];
  }
}

typedef enum tagTokenType {
  END_STATEMENT,		// ;
  FUNCTION_DEFINITION,		// function foobar(args) { "members"}
  FUNCTION_CALL			// foobar(args);
  NUMBER,			// 12.343434
  STRING,			// "sfsf"
  O_PARENTH,			// (
  C_PARENTH,			// )
  OPERATOR,			// +, -, /, *, /*, */, +=, -=, /=, *=, etc
  ARG_DELIM,			// ,
  NULL_VAL,			// null
  O_BRACKET,			// {
  C_BRACKET,			// }
  KEY_VAR			// any word with no symbols...basically
  				   unclassified function or variable
  BOOLEAN			// true, false
}TokenType;
an unsigned byte value representing the particualar Token type.

********************************************************************************
Lexer Examples:

GunderScript code:

function entryPoint(name) {
  /* Hello! */
  print("Hello" + name);
}

First Pass:

KEY_VAR "function"
KEY_VAR "entryPoint"
O_PARENTH
KEY_VAR "name"
C_PARENTH
O_BRACKET
OPERATOR /*
KEY_VAR "Hello!"
OPERATOR */
KEY_VAR "print"
O_PARENTH
STRING "Hello"
OPERATOR '+'
KEY_VAR "name"
C_PARENTH
END_STATEMENT
C_BRACKET

Second Pass:
Note: comments were automatically excluded

FUNCTION_DEFINITION .data.string = "entryPoint"; .data.args = name; .data.member
  = {
      STRING "Hello"
      OPERATOR '+'
      KEY_VAR "name"
      FUNCTION_CALL "print"
      END_STATEMENT
    }


GunderScript Code:

function exported foobar() {
  while(true) {
    print("And again!");
  }
}

Lexer Tokens:

KEY_VAR "function"
KEY_VAR "exported"
KEY_VAR "foobar"
O_PARENTH
C_PARENTH
O_BRACKET
KEY_VAR "while"
O_PARENTH
KEY_VAR "true"
C_PARENTH
O_BRACKET
KEY_VAR "print"
O_PARENTH
STRING "And Again!"
C_PARENTH
END_STATEMENT
C_BRACKET
C_BRACKET

Stage 2 tokens:
FUNCTION_DECLARATION "foobar" "exported" 

