Gunderscript Programming Language
(C) 2013 Christian Gunderman

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Contact Email: gundermanc@gmail.com


INTRODUCTION:
This repository contains/will contain the code for the Gunderscript
scripting language, currently under construction. This project is in no way
ready for actual use yet, but is growing quickly. Currently, I am just trying
to get the basic system up and running. For more information about the project,
see the EMACS org-mode file pseudocode.org in the docs directory.

PROJECT GOALS:
Gunderscript is designed to be a dynamically typed C style embeddable scripting
language written in C89 standard portable C. It compiles down to an executable
opcode and intended for use as a scripting language in games etc.

DESIRED FEATURES:
   - C style commenting, syntax, function declarations, operators, end statement
     character, etc.

   - Standard programming assignment statements:
      ex: varName = 3;

   - Multicharacter operators

   - Ability for library user to specify code entry points.

   - Variable Types:
     + Number :: Generic float data type
     + String :: String and generic byte data type
     + Boolean :: Boolean data type
     + Native C Custom :: Used by native developers to create file contexts, etc.
   - Auto conversion between types
   - Compiles to system independent bytecode. Runs on built in stack based VM.
     Byte code comes in two variations:
     + System Independent :: Refers to native functions in byte code by their
	  string names. This byte code is slower, however, it can be executed on
	  any GunderScript VM machine.
     + Optimized :: Refers to native functions in byte code by a pointer to their
		    current location in memory. This byte code is only valid for
		    the current execution of GunderScript, since pointers change
		    every execution. However, this bytecode is much faster since
		    it doesn't require looking up a function from its name in a
		    hashtable. This bytecode can be generated from system
		    independent bytecode right before execution.
   - While loops
   - Return Statements
   - For loops
   - Nestable logic
   - Local variables
   - Compile Time Error Checking
   - Compile to byte code

There MAY be support for structs, object, garbage collection, etc. in the future,
but for now I am focusing on the basics neccessary for implementing logic and use
as a plugin system.

COMPLETION STATUS:
C-Datastructs and Hashtable -- c-datastructs/ -- 100%
VM Stack Frame Stack -- frmstk.c -- 90% **FOUND A NEW BUG IN THIS**
Lexer for Compiler -- lexer.c -- 100%
Type Aware Stack -- typestk.c -- 100%
Virtual Machine Object -- vm.c -- 90%
VM Opcode interpreter -- ophandlers.c -- 85%
Compiler -- compiler.c -- 0%
Gunderscript Object -- gunderscript.c -- 0%

The planning documents can be found in the docs directory. They are not up to date
since my efforts are now focused on construction, but they are still a good indicator
of the intentions for the project.

This project is built upon the c-datastructs library by Christian Gunderman.