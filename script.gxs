/**
 * Gunderscript Example Script
 * (C) 2014 Christian Gunderman
 */

/**
 * Demonstrates assignment to function arguments, passing of values by function
 * params, and return values. Arguments are declared by name with no types.
 */
function test(x, y) {
  x = x + 1;
  return (x + y);
}

/**
 * Entry point to the script. Exported keyword tells the compiler to remember
 * the location in byte code of this function for use as an entry point.
 */
function exported main() {

  /* variable declaration. declaration and assignment in the same line does not
   * work yet (var x = 1;). At the moment, you are confined to declaring and 
   * initializing separately. Variables must be declared at top of method body,
   * just like in C89.
   */
  var x;
  var i;

  // demonstrates precedence of operators and assignment statements:
  x = 1;
  x = 4 * 2 + x + 2;

  /* demonstrates function calls returning and native functions (print function
   * is natively bound in main.c) and some string contat operations
   */
   if(true) {
     if(true) {
       print("Look! A nested if statement. ");
     }

     print("Here we did some " + "math operations: ", 1 + 2 * test(x, 1) + 1);
   } else {
     print(false);
     print(" Boolean Comparison: ", (3 + 3) > (2 + 2) || 5 <= 7);
   }
   
   /* count down from ten, a loop example */
   i = 10;
   while(i >= 0) {
     print(i, ", ");
     i = i - 1;
   }
}